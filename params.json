{"name":"FSO.js","tagline":"JavaScript FileSystemObject library for temporary and permanent client-side file storage","body":"FSO.js\r\n======\r\n\r\nFSO.js is a JavaScript FileSystemObject library for temporary and permanent client-side file storage.\r\n\r\nThis ReadMe serves as the official documentation for FSO.js.\r\n\r\nFor more in-depth information about the project, visit [FSOjs.com](http://fsojs.com).\r\n\r\nDetailed example code is available at [FSOjs - Examples](http://fsojs.com/examples.html).\r\n\r\nTweet the creator (me!) at [@keithwhor](http://twitter.com/keithwhor)\r\n\r\nGetting Started\r\n---------------\r\n\r\nFSO can be included on any webpage using:\r\n\r\n```html\r\n<script src=\"your_script_path/fso.min.js\"></script>\r\n```\r\n\r\nAnd a typical use case might be:\r\n\r\n```js\r\nvar fso = new FSO(1024 * 1024 * 1024, false); // Create 1GB of temp storage\r\n\r\nvar fsq = fso.createQueue();\r\n\r\n// Queues process commands sequentially,\r\n// prepare your queue like so:\r\nfsq.mkdir('hello');\r\nfsq.write('hello/world.txt', 'Hello World');\r\nfsq.read('hello/world.txt', function(data) { console.log(data); });\r\n\r\n// Finally, execute asynchronously.\r\nfsq.execute();\r\n```\r\n\r\n\r\nFSO\r\n---\r\n\r\n**FSO**\r\n\r\n```\r\nFSO(\r\n\topt_int_byteSize, [ = 1024 * 1024 * 1024 (1GB) ]\r\n\topt_bool_persisent, [ = false ]\r\n\topt_fn_successCallback,\r\n\topt_fn_errorCallback\r\n)\r\n```\r\n\r\nThe main FSO.js constructor\r\n\r\nreturns **FSO instance**\r\n\r\nInstantiate using ```var fso = new FSO();```\r\n\r\n---\r\n\r\n**FSO.createQueue**\r\n\r\n```\r\ncreateQueue()\r\n[ returns new FSOQueue ]\r\n```\r\n\r\nreturns **new FSOQueue instance**\r\n\r\n---\r\n\r\n\r\n**FSO.toURL**\r\n\r\n```\r\ntoURL(\r\n\tstr_fullPath\r\n)\r\n[ returns str_resourceURL ]\r\n```\r\n\r\nreturns a resource URL for specified ```fullPath```\r\n\r\n---\r\n\r\nFSOQueue\r\n--------\r\n\r\n**FSOQueue.write**\r\n\r\n```\r\nwrite(\r\n\tstring_fullFilePath,\r\n\tstring_data OR arrayBuffer_data OR array_data,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nWrites a file to an existing directory.\r\n\r\nCreates files if they do not exist.\r\n\r\nTruncates and overwrites existing files.\r\n\r\n---\r\n\r\n**FSOQueue.append**\r\n\r\n```\r\nappend(\r\n\tstring_fullFilePath,\r\n\tstring_data OR arrayBuffer_data OR array_data,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nAppends data to an existing file.\r\n\r\nCreates files if they do not exist.\r\n\r\n---\r\n\r\n**FSOQueue.insert**\r\n\r\n```\r\ninsert(\r\n\tstring_fullFilePath,\r\n\tstring_data OR arrayBuffer_data OR array_data,\r\n\tint_byteOffset,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nInserts data to existing file at ```byteOffset```.\r\n\r\nOverwrites file data at ```byteOffset``` to data length.\r\n\r\nZeroes out all data between current file length and ```byteOffset```.\r\n\r\nCreates files if they do not exist.\r\n\r\n---\r\n\r\n**FSOQueue.put**\r\n\r\n```\r\nput(\r\n\tfile_File,\r\n\tstring_fullPath,\r\n\topt_string_name,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nPlaces a ```File``` Object (i.e. result of file selection) at ```fullPath```.\r\n\r\nWill use given name if name not provided, or given a falsey value (i.e. empty string or ```null```).\r\n\r\nOverwrites existing files with the same name.\r\n\r\n---\r\n\r\n**FSOQueue.mkdir**\r\n\r\n```\r\nmkdir(\r\n\tstring_fullPath,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nRecursively creates all directories in ```fullPath``` if they do not exist\r\n\r\n---\r\n\r\n**FSOQueue.rm**\r\n\r\n```\r\nrm(\r\n\tstring_fullPath,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nRemoves an existing file or empty directory at ```fullPath```.\r\n\r\n---\r\n\r\n**FSOQueue.rmdir**\r\n\r\n```\r\nrmdir(\r\n\tstring_fullPath,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nRecursively removes a directory (including contents) at ```fullPath```.\r\n\r\n---\r\n\r\n**FSOQueue.rename**\r\n\r\n```\r\nrename(\r\n\tstring_fullPath,\r\n\tstring_name,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nRenames file or directory at ```fullPath``` to ```name```.\r\n\r\n---\r\n\r\n**FSOQueue.move**\r\n\r\n```\r\nmove(\r\n\tstring_fullPath,\r\n\tstring_toPath,\r\n\topt_string_name,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nMoves file or directory at ```fullPath``` to ```toPath``` with optional name ```name```.\r\n\r\n```name``` will remain unchanged if provided with a falsey value.\r\n\r\n---\r\n\r\n**FSOQueue.copy**\r\n\r\n```\r\ncopy(\r\n\tstring_fullPath,\r\n\tstring_toPath,\r\n\topt_string_name,\r\n\topt_fn_successCallback\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nCopies file or directory at ```fullPath``` to ```toPath``` with optional name ```name```.\r\n\r\n```name``` will remain unchanged if provided with a falsey value.\r\n\r\n---\r\n\r\n**FSOQueue.read**\r\n\r\n```\r\nread(\r\n\tstring_fullPath,\r\n\tfn_successCallback [ arguments str_data ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nReads file at ```fullPath``` and returns ```data``` to first argument of ```successCallback```.\r\n\r\n---\r\n\r\n**FSOQueue.readBuffer**\r\n\r\n```\r\nreadBuffer(\r\n\tstring_fullPath,\r\n\tfn_successCallback [ arguments arrayBuffer_data ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nReads file at ```fullPath``` and returns ```data``` to first argument of ```successCallback```.\r\n\r\n---\r\n\r\n**FSOQueue.info**\r\n\r\n```\r\ninfo(\r\n\tstring_fullPath,\r\n\tfn_successCallback [ arguments obj_fileData ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nReads file metadata at ```fullPath``` and returns ```fileData``` to first argument of ```successCallback```.\r\n\r\n---\r\n\r\n**FSOQueue.list**\r\n\r\n```\r\nlist(\r\n\tstring_fullPath,\r\n\tint_depth,\r\n\tfn_successCallback [ arguments obj_nestedList ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nReads directory contents of ```fullPath``` recursively to ```depth``` directories deep, and returns ```nestedList``` to first argument of ```successCallback```.\r\n\r\nIf ```depth === null```, will return full listing.\r\n\r\nUse ```FSOUtil.prettyDirectory``` for quick ```nestedList``` prettification.\r\n\r\n---\r\n\r\n**FSOQueue.getBytes**\r\n\r\n```\r\ngetBytes(\r\n\tfn_successCallback [ arguments int_usedBytes, int_availableBytes ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nReturns ```usedBytes, availableBytes``` to first two arguments of ```successCallback```, respectively.\r\n\r\n```availableBytes``` represents the *total available space*, including ```usedBytes``` - not the remaining space.\r\n\r\n---\r\n\r\n**FSOQueue.execute**\r\n\r\n```\r\nexecute(\r\n\topt_fn_successCallback,\r\n\topt_fn_errorCallback [ arguments obj_error ]\r\n)\r\n[ returns FSOQueue ]\r\n```\r\n\r\nExecutes a queue, prevents new commands from being queued, and runs ```successCallback``` on queue completion.\r\n\r\n```errorCallback``` will override default error reporting and run on failure of any command in the queue.\r\n\r\n---\r\n\r\nFSOUtil\r\n-------\r\n\r\nA static object containing useful utilities\r\n\r\n---\r\n\r\n**FSOUtil.prettyDirectory**\r\n\r\n```\r\nprettyDirectory(\r\n\tobject_nestedList\r\n)\r\n[ returns str_prettyList ]\r\n```\r\n\r\nReturns a prettified (text) directory listing of ```nestedList```\r\n\r\n---\r\n\r\n**FSOUtil.prettySize**\r\n\r\n```\r\nprettySize(\r\n\tint_bytes\r\n)\r\n[ returns str_prettySize ]\r\n```\r\n\r\nReturns a prettified (text) size of ```bytes```\r\n\r\n---\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}